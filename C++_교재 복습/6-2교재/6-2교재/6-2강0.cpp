/*
새로운 개념
1.함수 선언시 default값을 부여할 수 있음
(단, 함수 정의시 default값 설정은 안됨. 선언만 default 할당 가능함)
-default값이 설정된 함수를 호출할 때 일부 인수가 없어도 진행 된다는 특징.
-다만 책에서는 프로토타임(선언)과 정의 중 하나에만 default 가능하다고 함.

2.함수의 시그니처
:컴파일러가 함수를 구분하는 기준으로, 그 기준은 함수명과 매개변수목록(타입,개수,순서)로 구분함.
(단, 함수의 리턴은 시그니처에 포함 안되어있다!!!)

3.함수의 중복 정의(function overloading)
:같은 이름의 함수를 정의하는 것으로 매개변수 목록을 다르게 작성하면 가능함.
-그래서 시그니처가 다르기만 하면 중복 이름으로 다른 함수로 정의가 가능함.

4.스코프
:상수, 변수, 객체, 함수 등의 식별자가 접근할 수 있는 범위
-지역 스코프(블록 스코프):선택된 위치로부터 블록 전 영역 및 내부 블록도 접근 가능
-전역 스코프(파일 스코프):선언된 위치로부터 파일 전영역/이후 모든 블록 접근 가능
-즉, 함수 이름은 모든 부분 가능/ 함수 매개변수는 함수 내에서만 스코프

5.정적 지역 변수
static 자료형 변수명으로 선언된다.
정적 지역 변수는 선언되고 프로그램 종료되기 전까지 메모리에 남아 있다.

6.스코프 결정 연산자(::)
::변수명 사용하면 전역 변수에 접근할 수 있다.

7.기본적으로 전역에 선언된 변수는 내부 블록에서 스코프 결정 연산자::사용 안해도 접근 가능하다.
다만, 내부 블록에서 전역에 선언된 변수의 동일한 이름으로 선언이 된 변수가 존재하면
내부 블록에 선언된 변수가 우선순위이므로 그 변수를 출력하게 될거다.
이를 '변수 가려짐'(hiding)이라고 한다.

8.inline function(인라인 키워드)
인라인 키워드
:기존의 함수는 호출시 반환값이 자리를 차지하게 되는데
인라인 함수는 호출시 반환값 대신 그 자리에 함수의 본문이 들어가
그 함수의 코드가 직접 실행되므로
오버헤드(비용)를 고려해서 인라인 함수를 사용하기도 한다.
-또한, 작은 함수일수록 함수의 호출에 따른 오버헤드의 크기가 크기 때문에
인라인 함수를 사용하면 오버헤드를 줄일 수 있다.

9.피보나치수열

10.ctime 라이브러리의 자료형 clock_t
:이 자료형은 시간을 측정할 때 사용한다.
-clock_t 자료형으로 변수를 선언하고 시작을 측정할 때
clock()함수를 사용해 시작과 끝을 정하면 된다.

11.double c = 정수/정수 --> 소수점이하 안나오므로
분수의 소수 표현은 반드시 double/정수로 해야됨. 초기화되기 전에 반드시 하나는 double형이어야함

12.case식에 정수값만 오는데 "*"과 같은 배열은 못오고 무조건 '*'만 가능(정수타입)
*/